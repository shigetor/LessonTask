
/**
 * This file was generated by TONDev.
 * TONDev is a part of TON OS (see http://ton.dev).
 */
pragma ton-solidity >= 0.35.0;
pragma AbiHeader expire;

// This is class that describes you smart contract.
contract TaskList {
    // Contract can have an instance variables.
    // In this example instance variable `timestamp` is used to store the time of `constructor` or `touch`
    // function call
    uint32 public timestamp;

    // Contract can have a `constructor` – function that will be called when contract will be deployed to the blockchain.
    // In this example constructor adds current time to the instance variable.
    // All contracts need call tvm.accept(); for succeeded deploy
    constructor() public {
        // Check that contract's public key is set
        require(tvm.pubkey() != 0, 101);
        // Check that message has signature (msg.pubkey() is not zero) and
        // message is signed with the owner's private key
        require(msg.pubkey() == tvm.pubkey(), 102);
        // The current smart contract agrees to buy some gas to finish the
        // current transaction. This actions required to process external
        // messages, which bring no value (henceno gas) with themselves.
        tvm.accept();

        timestamp = now;
    }
    
    struct tasks
    {
        string name;
        bool complete_task;
        
    }

    mapping(int8 => tasks[]) mytasks;
    int8[] public arraytask;// сохраняем в этом массиве ключи задач
    uint Count;
    // добавляем задачу
    function addUsers (int8 id,string _name,bool _complete_task) public {
        tasks task = tasks(_name,_complete_task);
        mytasks[id].push(task);
        arraytask.push(id);
        timestamp=now;
        tvm.accept();
    }

    // получаем задачу по ключу
    function getTasks (int8 _id) public view returns (string,bool)
    {
        uint index =mytasks[_id].length;
    
        for (uint i=0;i<index;i++){
             tvm.accept();
            return (mytasks[_id][i].name,mytasks[_id][i].complete_task); 
        }
       
    }
    function countTasks() view public returns (int8[]) {
        tvm.accept();
        return arraytask;
    }
    //удаляет ключ задачи
    function deleteTask (int8 _id) public  returns (string)
    {
        uint index =mytasks[_id].length;
        for (uint i=0;i<index;i++){
            delete mytasks[_id][i].name;
            delete mytasks[_id][i].complete_task;
        }

        arraytask.pop();
        tvm.accept();
        return "Задача удалена";
    }
    //делает задачу закрытой
    function Completed(int8 _id)public returns(string){
        uint index =mytasks[_id].length;
    
        for (uint i=0;i<index;i++){
           mytasks[_id][i].complete_task=true;
        }
        tvm.accept();
        return 'Задача выполнена';
        
    }
    // Как получить все ключи без запоминания индекса я не смог сделать,c фиксированныем числом работает
    //а так нет(
    function OpenTasks() public returns (int8){
        int8 count;
        for (int8 i=0;i<10;i++){
            for (uint j=0;i<10;j++){
                if ( mytasks[i][j].complete_task=false){
                    count++;
                }
                
        }
        tvm.accept();
        return count;
        }
    }
}

   

